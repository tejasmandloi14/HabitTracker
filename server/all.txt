const mongoose = require("mongoose");

const HabitSchema = new mongoose.Schema({
  name: { type: String, required: true },
  userId: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  streak: { type: Number, default: 0 },
  streakEnabled: { type: Boolean, default: false },
  lastCompleted: { type: Date },
});

module.exports = mongoose.model("Habit", HabitSchema);
const mongoose = require("mongoose");

const UserSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
});

module.exports = mongoose.model("User", UserSchema);
const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");

const router = express.Router();

router.post("/signup", async (req, res) => {
  const { username, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);

  try {
    const newUser = await User.create({ username, password: hashedPassword });
    res.status(201).json({ message: "User registered successfully" });
  } catch (error) {
    res.status(400).json({ error: "Error registering user" });
  }
});

router.post("/login", async (req, res) => {
  const { username, password } = req.body;
  
  const user = await User.findOne({ username });
  if (!user) return res.status(404).json({ error: "User not found" });

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) return res.status(400).json({ error: "Invalid credentials" });

  const token = jwt.sign({ userId: user._id }, "secret", { expiresIn: "1h" });
  res.json({ token, userId: user._id });
});

module.exports = router;
const express = require("express");
const jwt = require("jsonwebtoken");
const Habit = require("../models/Habit");
const router = express.Router();

// Middleware to verify JWT
const authenticateToken = (req, res, next) => {
  const token = req.header("Authorization"); // Get token from headers
  if (!token) return res.status(401).json({ message: "Access Denied. No token provided." });

  try {
    const verified = jwt.verify(token, "secret"); // Verify token with secret key
    req.user = verified; // Attach decoded user info to request
    next();
  } catch (error) {
    res.status(403).json({ message: "Invalid Token" });
  }
};

// Fetch habits for a particular user
router.get("/", authenticateToken, async (req, res) => {
  try {
    const habits = await Habit.find({ userId: req.user.userId }); // Fetch habits for logged-in user
    res.json(habits);
  } catch (error) {
    res.status(500).json({ message: "Error fetching habits" });
  }
});

// Add a new habit (for authenticated user)
router.post("/add-habit", authenticateToken, async (req, res) => {
  const { name, streakEnabled } = req.body;
  try {
    const newHabit = new Habit({ name, userId: req.user.userId, streakEnabled });
    await newHabit.save();
    res.status(201).json({ message: "Habit added successfully", habit: newHabit });
  } catch (error) {
    res.status(500).json({ message: "Error adding habit" });
  }
});

// Complete a habit
router.put("/complete-habit/:id", authenticateToken, async (req, res) => {
  try {
    const habit = await Habit.findOne({ _id: req.params.id, userId: req.user.userId });
    if (!habit) return res.status(404).json({ message: "Habit not found" });

    if (habit.streakEnabled) habit.streak += 1;
    habit.lastCompleted = new Date();
    await habit.save();
    res.json({ message: "Habit marked as completed", habit });
  } catch (error) {
    res.status(500).json({ message: "Error completing habit" });
  }
});

// Delete a habit
router.delete("/delete-habit/:id", authenticateToken, async (req, res) => {
  try {
    const habit = await Habit.findOneAndDelete({ _id: req.params.id, userId: req.user.userId });
    if (!habit) return res.status(404).json({ message: "Habit not found" });

    res.json({ message: "Habit deleted successfully" });
  } catch (error) {
    res.status(500).json({ message: "Error deleting habit" });
  }
});

module.exports = router;
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const dotenv = require("dotenv");
const authRoutes = require("./routes/authRoutes");
const habitRoutes = require("./routes/habitRoutes");

dotenv.config();
const app = express();

app.use(express.json());
app.use(cors());

mongoose.connect(`mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASS}@habittrackercluster.qxwo0.mongodb.net/?retryWrites=true&w=majority&appName=HabitTrackerCluster`, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log("✅ Connected to MongoDB"))
  .catch((err) => console.error("❌ MongoDB Connection Error:", err));

app.use("/api/auth", authRoutes);
app.use("/api/habits", habitRoutes);

const PORT = 5000;
app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));
